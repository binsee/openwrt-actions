#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================
name: X64-Lean-OpenWrt-CI

on:
  schedule:
    - cron: 0 22 * * *
 push:
   branches: 
     - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          echo "Deleting files, please wait ..."
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/Lienol/lean-lede
        REPO_BRANCH: dev
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
    
    - name: Costom configure file
      run: |
          cd openwrt
          rm -f .config
          cp ../lean-lede-x64 .config

    - name: Make download
      run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

    - name: Multi-thread compile
      run: |
          cd openwrt
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s

    - name: Single-thread compile
      if: failure()
      run: |
          cd openwrt
          make -j1 V=s

    - name: Get release name
      id: get_release_name
      env: 
        WORKFLOW: ${{ github.workflow }}
      run: |
        DATE=$(TZ=Asia/Shanghai date +%Y%m%d-%H%M)
        NAME=$(echo $WORKFLOW | sed 's/\-CI/-/')$DATE
        echo new release name: $NAME
        echo "::set-output name=release_name::$NAME"

    - name: Assemble artifact
      run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find openwrt/bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/
          find openwrt/bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
          find openwrt/bin/targets/ -name "*combined*vmdk*" | xargs -i mv -f {} ./artifact/

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.get_release_name.outputs.release_name }}
        path: ./artifact/

    - name: Create Release file
      run: |
          mv ./artifact ./${{ steps.get_release_name.outputs.release_name }}
          zip openwrt ./${{ steps.get_release_name.outputs.release_name }}/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:  
        tag_name: ${{ steps.get_release_name.outputs.release_name }}
        release_name: Release ${{ steps.get_release_name.outputs.release_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./openwrt.zip
        asset_name: ${{ steps.get_release_name.outputs.release_name }}.zip
        asset_content_type: application/zip